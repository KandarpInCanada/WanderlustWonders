name: Build, Push and Deploy

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: travel-stories-dev  # Updated to match your tfvars
  ECS_CLUSTER: travel-stories-dev
  ECS_SERVICE: travel-stories-dev
  ECS_TASK_DEFINITION: travel-stories-dev
  CONTAINER_NAME: travel-stories

jobs:
  application:
    name: travel-stories Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint || true

  check-tag:
    name: Check if Tag is Present
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      has_tag: ${{ steps.check-tag.outputs.has_tag }}
      tag_name: ${{ steps.check-tag.outputs.tag_name }}
    steps:
      - name: Check for tag
        id: check-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            echo "has_tag=true" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG" >> $GITHUB_OUTPUT
            echo "Tag detected: $TAG"
          else
            echo "has_tag=false" >> $GITHUB_OUTPUT
            echo "No tag detected. Pipeline will fail at build stage."
          fi

  build-and-push:
    name: Build and Push to ECR
    needs: [application, check-tag]
    runs-on: ubuntu-latest
    if: needs.check-tag.outputs.has_tag == 'true'
    outputs:
      image: ${{ steps.set-image.outputs.image }}
      tag_name: ${{ needs.check-tag.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.check-tag.outputs.tag_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_AWS_REGION=${{ secrets.NEXT_PUBLIC_AWS_REGION }}
            NEXT_PUBLIC_AWS_BUCKET_NAME=${{ secrets.NEXT_PUBLIC_AWS_BUCKET_NAME }}
            NEXT_PUBLIC_AWS_ACCOUNT_ID=${{ secrets.NEXT_PUBLIC_AWS_ACCOUNT_ID }}

      - name: Set image output
        id: set-image
        run: echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.check-tag.outputs.tag_name }}" >> $GITHUB_OUTPUT

  deploy-to-ecs:
    name: Deploy to ECS
    needs: [build-and-push, check-tag]
    runs-on: ubuntu-latest
    if: needs.check-tag.outputs.has_tag == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Debug image value
        run: |
          echo "Image value from previous job: ${{ needs.build-and-push.outputs.image }}"
          echo "Tag name: ${{ needs.build-and-push.outputs.tag_name }}"

      - name: Set image URI
        id: image-uri
        run: |
          REGISTRY_ID=$(aws ecr describe-registry --query registryId --output text)
          IMAGE_URI="${REGISTRY_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.tag_name }}"
          echo "image=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "Using image: ${IMAGE_URI}"

      - name: Update environment variables in task definition
        run: |
          # Check the structure of the task definition
          cat task-definition.json | jq '.containerDefinitions'
          
          # Update the environment variables
          jq 'if .containerDefinitions[0].environment then 
                .containerDefinitions[0].environment += [
                  {"name": "NEXT_PUBLIC_SUPABASE_URL", "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}"},
                  {"name": "NEXT_PUBLIC_SUPABASE_ANON_KEY", "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}"},
                  {"name": "NEXT_AWS_ACCESS_KEY_ID", "value": "${{ secrets.NEXT_AWS_ACCESS_KEY_ID }}"},
                  {"name": "NEXT_AWS_SECRET_ACCESS_KEY", "value": "${{ secrets.NEXT_AWS_SECRET_ACCESS_KEY }}"},
                  {"name": "NEXT_PUBLIC_AWS_REGION", "value": "${{ secrets.NEXT_PUBLIC_AWS_REGION }}"},
                  {"name": "NEXT_PUBLIC_AWS_BUCKET_NAME", "value": "${{ secrets.NEXT_PUBLIC_AWS_BUCKET_NAME }}"},
                  {"name": "NEXT_PUBLIC_AWS_ACCOUNT_ID", "value": "${{ secrets.NEXT_PUBLIC_AWS_ACCOUNT_ID }}"},
                  {"name": "NEXT_SUPABASE_SERVICE_ROLE_KEY", "value": "${{ secrets.NEXT_SUPABASE_SERVICE_ROLE_KEY }}"}
                ] 
              else 
                .containerDefinitions[0] += {"environment": [
                  {"name": "NEXT_PUBLIC_SUPABASE_URL", "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}"},
                  {"name": "NEXT_PUBLIC_SUPABASE_ANON_KEY", "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}"},
                  {"name": "NEXT_AWS_ACCESS_KEY_ID", "value": "${{ secrets.NEXT_AWS_ACCESS_KEY_ID }}"},
                  {"name": "NEXT_AWS_SECRET_ACCESS_KEY", "value": "${{ secrets.NEXT_AWS_SECRET_ACCESS_KEY }}"},
                  {"name": "NEXT_PUBLIC_AWS_REGION", "value": "${{ secrets.NEXT_PUBLIC_AWS_REGION }}"},
                  {"name": "NEXT_PUBLIC_AWS_BUCKET_NAME", "value": "${{ secrets.NEXT_PUBLIC_AWS_BUCKET_NAME }}"},
                  {"name": "NEXT_PUBLIC_AWS_ACCOUNT_ID", "value": "${{ secrets.NEXT_PUBLIC_AWS_ACCOUNT_ID }}"},
                  {"name": "NEXT_SUPABASE_SERVICE_ROLE_KEY", "value": "${{ secrets.NEXT_SUPABASE_SERVICE_ROLE_KEY }}"}
                ]}
              end' task-definition.json > updated-task-definition.json
          mv updated-task-definition.json task-definition.json

      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.image-uri.outputs.image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  fail-if-no-tag:
    name: Fail Pipeline if No Tag
    needs: [check-tag]
    runs-on: ubuntu-latest
    if: needs.check-tag.outputs.has_tag != 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Fail workflow
        run: |
          echo "Error: No tag detected. This pipeline only runs when a tag is present."
          exit 1
